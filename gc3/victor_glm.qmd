---
title: "Victor's GC3 Work"
format: html
---

```{r}
library(geoR)
library(dplyr)
library(conflicted)
library(here)
library(tidyverse)
library(scico)
library(sf)
library(rnaturalearth)
library(geoR)
library(spBayes)
library(coda)
library(ggspatial)
library(dplyr)
library(xtable)

conflicts_prefer(dplyr::filter, dplyr::select)

great_lakes_states <- ne_states(
    country = "United States of America", returnclass = "sf"
) %>%
    filter(
        name %in% c(
            "Minnesota", "Wisconsin", "Illinois", "Indiana", "Michigan", "Ohio",
            "Pennsylvania", "New York"
        )
    )
ontario <- ne_states(country = "Canada", returnclass = "sf") %>%
    filter(name == "Ontario")
great_lakes <- ne_download(
    scale = 50, type = "lakes", category = "physical", returnclass = "sf"
) %>%
    filter(
        name %in% c(
            "Lake Superior", "Lake Michigan", "Lake Huron", "Lake Erie",
            "Lake Ontario"
        )
    )

df <- read.csv("../data/model_data.csv")
```

There is exactly one record for each pair of `AcousticSite` and `Year`.
```{r}
df %>%
    count(AcousticSite, Year, name = "num_recs") %>%
    filter(num_recs > 1)
```

One idea was to use, at each site, records for different years as replicates. Starting values for the covariance function parameters could then be computed using sample correlations between sites. The output below shows that this approach isn't viable. At most sites, there is a record for just one year, and no site has more than three years' worth of data.
```{r}
df %>%
    group_by(AcousticSite) %>%
    summarize(num_years = n_distinct(Year)) %>%
    count(num_years, name = "num_sites")
```

For each site, for each species, sum detections across years.
```{r}
df2 <- df %>%
    select(!c(ALL, num_detectable_species)) %>%
    group_by(AcousticSite) %>%
    summarize(
        across(c(ends_with("_count"), num_nights), sum),
        Lat = Lat[1],
        Long = Long[1],
        dist_to_water = dist_to_water[1],
        water_size = water_size[1]
    ) %>%
    pivot_longer(
        ends_with("_count"), names_to = "Species", values_to = "count"
    ) %>%
    mutate(Species = str_remove(Species, fixed("_count")))
```

A few species have at least 100 observations.
```{r}
(
    species_obs_counts <- df2 %>%
        filter(count > 0) %>%
        count(Species, sort = TRUE, name = "num_obs")
)
```

For each species with at least 100 observations, the count distribution is strongly right-skewed. Some of the counts are very large, like the largest counts for `MYOLUC`. This makes me wary of fitting a spatial Poisson model. The only permissible values of the `family` argument of `spGLM()` are `"binomial"` and `"poisson"` - there's no `"quasipoisson"` option like there is for `glm()`. So, it doesn't seem to be possible to fit a spatial Poisson model with overdispersion using `spGLM()`.
```{r}
df2 %>%
    filter(Species %in% filter(species_obs_counts, num_obs >= 100)$Species) %>%
    ggplot(aes(count)) +
    facet_wrap(vars(Species), scales = "free_x") +
    geom_histogram(bins = 20) +
    theme_bw()
```

Based on the histograms below, I wonder if using `Lat` and `dist_to_water` as the coordinates is non-ideal given that for each coordinate, there is a concentration around one particular value (`45` in the case of `Lat` and `0` in the case of `dist_to_water`). If most sites have roughly the same coordinates, then most values in the spatial random effects covariance matrix are going to be roughly the same. Does this imply that the covariance matrix is close to singular?
```{r}
df2 %>%
    distinct(Lat, Long, dist_to_water) %>%
    pivot_longer(everything(), names_to = "coord", values_to = "val") %>%
    ggplot(aes(val)) +
    facet_wrap(vars(coord), scales = "free_x") +
    geom_histogram(bins = 20) +
    theme_bw()
```

Count detections by species.
```{r}
df2 %>%
    group_by(Species) %>%
    summarize(count = sum(count)) %>%
    arrange(desc(count))
```

We'll fit a model using data on the species whose empirical semivariograms appear reasonable according to Matt. Also, we put the coordinate variables on the same scale. This will prevent one coordinate from dominating in distance computations for spatial models.
```{r}
model_df <- df2 %>%
    filter(Species %in% c("EPTFUS", "LASNOC", "PERSUB")) %>%
    mutate(
        Lat_scaled = as.vector(scale(Lat)),
        Long_scaled = as.vector(scale(Long)),
        dist_to_water_scaled = as.vector(scale(dist_to_water))
    )
```

The sites aren't on a grid.
```{r}
model_df %>%
    ggplot(aes(dist_to_water, Lat)) +
    geom_point(alpha = 0.3) +
    theme_bw()
```

# Models without Spatial Random Effects

## Poisson Models with `dist_to_water_scaled` and `Species`

First fit a non-spatial Poisson model with `dist_to_water_scaled` and `Species` as covariates.
```{r}
poisson_mod1 <- glm(
    count ~ dist_to_water_scaled + Species,
    poisson,
    model_df,
    offset = log(model_df$num_nights)
)
poisson_mod1_coefs <- coef(poisson_mod1)
poisson_mod1_fitted_vals <- unname(fitted(poisson_mod1))
poisson_mod1_resids <- unname(resid(poisson_mod1))
poisson_mod1_resid_var <- var(resid(poisson_mod1))
```

Under the model, $\mathbb{E}(Y(s)) = \text{Var}(Y(s))$, or $\sqrt{\mathbb{E}(Y(s))} = \text{SD}(Y(s))$. We use the residuals to check whether this property of the model is reasonable. For the $i$th observation, which was recorded at location $s_i$, we compare $\sqrt{\widehat{\mathbb{E}}(Y(s_i))}$ to the absolute residual $|Y(s_i) - \widehat{Y}(s_i)|$; if the property is reasonable, then these two quantities should be similar. Below, we plot the absolute residual versus the square root of the fitted value. The two are equal along the dashed line. For some observations, the absolute residual is much larger than expected. However, this isn't true systematically, so those observations may just be outliers. The absolute residuals that aren't close to the line seem to be below it more often than above it, which suggests underdispersion.
```{r}
tibble(fitted_val = poisson_mod1_fitted_vals, resid = poisson_mod1_resids) %>%
    ggplot(aes(sqrt(fitted_val), abs(resid))) +
    geom_point(alpha = 0.3) +
    geom_abline(linetype = "dashed", slope = 1, intercept = 0) +
    labs(x = expression(sqrt("Fitted Value")), y = "Absolute Residual") +
    theme_bw()
```

We next compute the empirical semivariogram of the residuals from the model. Since there are replicates for some sites, we need to jitter the coordinates to make things work. We use 100 bins to compute the empirical semivariogram.
```{r}
#| output: FALSE

poisson_mod1_variogram <- model_df %>%
    add_column(resid =  poisson_mod1_resids) %>%
    select("Long", "Lat", "resid") %>%
    as.geodata() %>%
    jitterDupCoords(max = 1e-4) %>%
    variog(uvec = 100, messages = FALSE)
```
If there is any spatial dependence, it only appears to be over small distances.
```{r}
poisson_mod1_variogram %>%
    plot(
        type = "o",
        main = "Empirical Semivariogram of Residuals",
        xlab = "Distance", ylab = "Semivariance"
    )
```

## Poisson Models with `Long_scaled` and `Species`

Next fit a non-spatial Poisson model with `Long_scaled` and `Species` as covariates.
```{r}
poisson_mod2 <- glm(
    count ~ Long_scaled + Species,
    poisson,
    model_df,
    offset = log(model_df$num_nights)
)
poisson_mod2_coefs <- coef(poisson_mod2)
poisson_mod2_fitted_vals <- unname(fitted(poisson_mod2))
poisson_mod2_resids <- unname(resid(poisson_mod2))
poisson_mod2_resid_var <- var(resid(poisson_mod2))
```

We plot the absolute residual versus the square root of the fitted value for the fitted model. Underdispersion is again suggested.
```{r}
tibble(fitted_val = poisson_mod2_fitted_vals, resid = poisson_mod2_resids) %>%
    ggplot(aes(sqrt(fitted_val), abs(resid))) +
    geom_point(alpha = 0.3) +
    geom_abline(linetype = "dashed", slope = 1, intercept = 0) +
    labs(x = expression(sqrt("Fitted Value")), y = "Absolute Residual") +
    theme_bw()
```

We next compute the empirical semivariogram of the residuals from the model.
```{r}
#| output: FALSE

poisson_mod2_variogram <- model_df %>%
    add_column(resid =  poisson_mod2_resids) %>%
    select("Long", "Lat", "resid") %>%
    as.geodata() %>%
    jitterDupCoords(max = 1e-4) %>%
    variog(uvec = 100, messages = FALSE)
```

If there is any spatial dependence, it only appears to be over small distances.
```{r}
poisson_mod2_variogram %>%
    plot(
        type = "o",
        main = "Empirical Semivariogram of Residuals",
        xlab = "Distance", ylab = "Semivariance"
    )
```

# Models with Spatial Random Effects

## Poisson Models with `dist_to_water_scaled` and `Species`

Fit a spatial Poisson model using `dist_to_water_scaled` and `Species` as predictors and an LRGP with 49 knots in a grid.
```{r}
spatial_poisson_mod1_grid49 <- spGLM(
    count ~ dist_to_water_scaled + Species,
    family = "poisson",
    weights = model_df$num_nights,
    data = model_df,
    coords = as.matrix(model_df[, c("Lat_scaled", "Long_scaled")]),
    knots = c(7, 7),
    starting = list(
        beta = poisson_mod1_coefs,
        sigma.sq = poisson_mod1_resid_var,
        phi = 0.5,
        w = 0
    ),
    priors = list(
        sigma.sq.ig = c(poisson_mod1_resid_var, 4 * poisson_mod1_resid_var),
        phi.unif = c(0.1, 10),
        beta.normal = list(
            poisson_mod1_coefs, 4 * sqrt(diag(vcov(poisson_mod1)))
        )
    ),
    cov.model = "exponential",
    amcmc = list(n.batch = 500, batch.length = 50, accept.rate = 0.25),
    verbose = TRUE,
    n.report = 10
)
```

Fit a spatial Poisson model using `dist_to_water_scaled` and `Species` as predictors and an LRGP with 100 knots in a grid.
```{r}
spatial_poisson_mod1_grid100 <- spGLM(
    count ~ dist_to_water_scaled + Species,
    family = "poisson",
    weights = model_df$num_nights,
    data = model_df,
    coords = as.matrix(model_df[, c("Lat_scaled", "Long_scaled")]),
    knots = c(10, 10),
    starting = list(
        beta = poisson_mod1_coefs,
        sigma.sq = poisson_mod1_resid_var,
        phi = 0.5,
        w = 0
    ),
    priors = list(
        sigma.sq.ig = c(poisson_mod1_resid_var, 4 * poisson_mod1_resid_var),
        phi.unif = c(0.1, 10),
        beta.normal = list(
            poisson_mod1_coefs, 4 * sqrt(diag(vcov(poisson_mod1)))
        )
    ),
    cov.model = "exponential",
    amcmc = list(n.batch = 500, batch.length = 50, accept.rate = 0.25),
    verbose = TRUE,
    n.report = 10
)
```

Fit a spatial Poisson model using `dist_to_water_scaled` and `Species` as predictors and an LRGP with 49 knots that are k-means cluster centroids.
```{r}
spatial_poisson_mod1_kmeans49 <- spGLM(
    count ~ dist_to_water_scaled + Species,
    family = "poisson",
    weights = model_df$num_nights,
    data = model_df,
    coords = as.matrix(model_df[, c("Lat_scaled", "Long_scaled")]),
    knots = kmeans(
        model_df[, c("Lat_scaled", "Long_scaled")], centers = 49
    )$centers,
    starting = list(
        beta = poisson_mod1_coefs,
        sigma.sq = poisson_mod1_resid_var,
        phi = 0.5,
        w = 0
    ),
    priors = list(
        sigma.sq.ig = c(poisson_mod1_resid_var, 4 * poisson_mod1_resid_var),
        phi.unif = c(0.1, 10),
        beta.normal = list(
            poisson_mod1_coefs, 4 * sqrt(diag(vcov(poisson_mod1)))
        )
    ),
    cov.model = "exponential",
    amcmc = list(n.batch = 500, batch.length = 100, accept.rate = 0.25),
    verbose = TRUE,
    n.report = 10
)
```

Fit a spatial Poisson model using `dist_to_water_scaled` and `Species` as predictors and an LRGP with 100 knots that are k-means cluster centroids.
```{r}
spatial_poisson_mod1_kmeans100 <- spGLM(
    count ~ dist_to_water_scaled + Species,
    family = "poisson",
    weights = model_df$num_nights,
    data = model_df,
    coords = as.matrix(model_df[, c("Lat_scaled", "Long_scaled")]),
    knots = kmeans(
        model_df[, c("Lat_scaled", "Long_scaled")], centers = 100
    )$centers,
    starting = list(
        beta = poisson_mod1_coefs,
        sigma.sq = poisson_mod1_resid_var,
        phi = 0.5,
        w = 0
    ),
    priors = list(
        sigma.sq.ig = c(poisson_mod1_resid_var, 4 * poisson_mod1_resid_var),
        phi.unif = c(0.1, 10),
        beta.normal = list(
            poisson_mod1_coefs, 4 * sqrt(diag(vcov(poisson_mod1)))
        )
    ),
    cov.model = "exponential",
    amcmc = list(n.batch = 500, batch.length = 50, accept.rate = 0.25),
    verbose = TRUE,
    n.report = 10
)
```

## Poisson Models with `Long_scaled` and `Species`

Fit a spatial Poisson model using `Long_scaled` and `Species` as predictors and an LRGP with 49 knots in a grid.
```{r}
spatial_poisson_mod2_grid49 <- spGLM(
    count ~ Long_scaled + Species,
    family = "poisson",
    weights = model_df$num_nights,
    data = model_df,
    coords = as.matrix(model_df[, c("Lat_scaled", "dist_to_water_scaled")]),
    knots = c(7, 7),
    starting = list(
        beta = poisson_mod2_coefs,
        sigma.sq = poisson_mod2_resid_var,
        phi = 0.5,
        w = 0
    ),
    priors = list(
        sigma.sq.ig = c(poisson_mod2_resid_var, 4 * poisson_mod2_resid_var),
        phi.unif = c(0.1, 10),
        beta.normal = list(
            poisson_mod2_coefs, 4 * sqrt(diag(vcov(poisson_mod2)))
        )
    ),
    cov.model = "exponential",
    amcmc = list(n.batch = 500, batch.length = 50, accept.rate = 0.25),
    verbose = TRUE,
    n.report = 10
)
```

Fit a spatial Poisson model using `Long_scaled` and `Species` as predictors and an LRGP with 100 knots in a grid.
```{r}
spatial_poisson_mod2_grid100 <- spGLM(
    count ~ Long_scaled + Species,
    family = "poisson",
    weights = model_df$num_nights,
    data = model_df,
    coords = as.matrix(model_df[, c("Lat_scaled", "dist_to_water_scaled")]),
    knots = c(10, 10),
    starting = list(
        beta = poisson_mod2_coefs,
        sigma.sq = poisson_mod2_resid_var,
        phi = 0.5,
        w = 0
    ),
    priors = list(
        sigma.sq.ig = c(poisson_mod2_resid_var, 4 * poisson_mod2_resid_var),
        phi.unif = c(0.1, 10),
        beta.normal = list(
            poisson_mod2_coefs, 4 * sqrt(diag(vcov(poisson_mod2)))
        )
    ),
    cov.model = "exponential",
    amcmc = list(n.batch = 500, batch.length = 50, accept.rate = 0.25),
    verbose = TRUE,
    n.report = 10
)
```

Fit a spatial Poisson model using `Long_scaled` and `Species` as predictors and an LRGP with 49 knots that are k-means centroids.
```{r}
spatial_poisson_mod2_kmeans49 <- spGLM(
    count ~ Long_scaled + Species,
    family = "poisson",
    weights = model_df$num_nights,
    data = model_df,
    coords = as.matrix(model_df[, c("Lat_scaled", "dist_to_water_scaled")]),
    knots = kmeans(
        model_df[, c("Lat_scaled", "dist_to_water_scaled")], centers = 49
    )$centers,
    starting = list(
        beta = poisson_mod2_coefs,
        sigma.sq = poisson_mod2_resid_var,
        phi = 0.5,
        w = 0
    ),
    priors = list(
        sigma.sq.ig = c(poisson_mod2_resid_var, 4 * poisson_mod2_resid_var),
        phi.unif = c(0.1, 10),
        beta.normal = list(
            poisson_mod2_coefs, 4 * sqrt(diag(vcov(poisson_mod2)))
        )
    ),
    cov.model = "exponential",
    amcmc = list(n.batch = 500, batch.length = 50, accept.rate = 0.25),
    verbose = TRUE,
    n.report = 10
)
```

Fit a spatial Poisson model using `Long_scaled` and `Species` as predictors and an LRGP with 100 knots that are k-means centroids.
```{r}
spatial_poisson_mod2_kmeans100 <- spGLM(
    count ~ Long_scaled + Species,
    family = "poisson",
    weights = model_df$num_nights,
    data = model_df,
    coords = as.matrix(model_df[, c("Lat_scaled", "dist_to_water_scaled")]),
    knots = kmeans(
        model_df[, c("Lat_scaled", "dist_to_water_scaled")], centers = 100
    )$centers,
    starting = list(
        beta = poisson_mod2_coefs,
        sigma.sq = poisson_mod2_resid_var,
        phi = 0.5,
        w = 0
    ),
    priors = list(
        sigma.sq.ig = c(poisson_mod2_resid_var, 4 * poisson_mod2_resid_var),
        phi.unif = c(0.1, 10),
        beta.normal = list(
            poisson_mod2_coefs, 4 * sqrt(diag(vcov(poisson_mod2)))
        )
    ),
    cov.model = "exponential",
    amcmc = list(n.batch = 500, batch.length = 50, accept.rate = 0.25),
    verbose = TRUE,
    n.report = 10
)
```

# Spatial Model Summaries

## MCMC Diagnostics

The function below can be used to examine the convergence of the Markov chains.
```{r}
make_chain_plot <- function(spatial_poisson_mod, tail_n = 10000) {
    vals <- spatial_poisson_mod %>%
        `$`(p.beta.theta.samples) %>%
        as_tibble() %>%
        rename(Intercept = `(Intercept)`) %>%
        mutate(iter = row_number()) %>%
        slice_tail(n = tail_n)
    vals$Intercept <- as.vector(scale(vals$phi)) +
        as.vector(scale(vals$dist_to_water_scaled))
    vals$Intercept <- as.vector(scale(vals$Intercept)) / 100 + 0.5
    vals %>%
        pivot_longer(!iter, names_to = "param", values_to = "estimate") %>%
        ggplot(aes(iter, estimate)) +
        facet_wrap(vars(param), nrow = 2, scales = "free_y") +
        geom_line() +
        scale_x_continuous(n.breaks = 3) +
        labs(x = "Iteration", y = "Estimate") +
        theme_bw()
}
```

The `Intercept`, `phi`, and `sigma.sq` chains didn't converge for `spatial_poisson_mod1_grid49`.
```{r}
make_chain_plot(spatial_poisson_mod1_grid49)
```

The `dist_to_water_scaled`, `Intercept`, `phi`, and `sigma.sq` chains didn't converge for `spatial_poisson_mod1_grid100`.
```{r}
make_chain_plot(spatial_poisson_mod1_grid100)
```

The `Intercept` chain didn't converge for `spatial_poisson_mod1_kmeans49`.
```{r}
make_chain_plot(spatial_poisson_mod1_kmeans49)
```

The `Intercept` chain didn't converge for `spatial_poisson_mod1_kmeans100`.
```{r}
make_chain_plot(spatial_poisson_mod1_kmeans100)
```

The `Intercept` chain didn't converge for `spatial_poisson_mod2_grid49`.
```{r}
make_chain_plot(spatial_poisson_mod2_grid49)
```

The `Intercept` and `sigma.sq` chains didn't converge for `spatial_poisson_mod2_grid100`.
```{r}
make_chain_plot(spatial_poisson_mod2_grid100)
```

The `Intercept` chain didn't converge for `spatial_poisson_mod2_kmeans49`.
```{r}
make_chain_plot(spatial_poisson_mod2_kmeans49)
```

The `Intercept` chain didn't converge for `spatial_poisson_mod2_kmeans100`.
```{r}
make_chain_plot(spatial_poisson_mod2_kmeans100)
```

These were the acceptance rates in the final batches.
```{r}
rbind(
    spatial_poisson_mod1_grid49$acceptance %>% t() %>% tail(n = 1),
    spatial_poisson_mod1_grid100$acceptance %>% t() %>% tail(n = 1),
    spatial_poisson_mod1_kmeans49$acceptance %>% t() %>% tail(n = 1),
    spatial_poisson_mod1_kmeans100$acceptance %>% t() %>% tail(n = 1),
    spatial_poisson_mod2_grid49$acceptance %>% t() %>% tail(n = 1),
    spatial_poisson_mod2_grid100$acceptance %>% t() %>% tail(n = 1),
    spatial_poisson_mod2_kmeans49$acceptance %>% t() %>% tail(n = 1),
    spatial_poisson_mod2_kmeans100$acceptance %>% t() %>% tail(n = 1)
)
```

## Coefficient and Spatial Random Effect Estimates

Below is a function for computing the coefficient estimates.
```{r}
calc_beta_hats <- function(spatial_poisson_mod, tail_n = 10000) {
    spatial_poisson_mod %>%
    `$`("p.beta.theta.samples") %>%
    tail(n = tail_n) %>%
    colMeans()
}

```

```{r}
beta_hats1_grid49 <- calc_beta_hats(spatial_poisson_mod1_grid49)
beta_hats1_grid100 <- calc_beta_hats(spatial_poisson_mod1_grid100)
beta_hats1_kmeans49 <- calc_beta_hats(spatial_poisson_mod1_kmeans49)
beta_hats1_kmeans100 <- calc_beta_hats(spatial_poisson_mod1_kmeans100)

beta_hats2_grid49 <- calc_beta_hats(spatial_poisson_mod2_grid49)
beta_hats2_grid100 <- calc_beta_hats(spatial_poisson_mod2_grid100)
beta_hats2_kmeans49 <- calc_beta_hats(spatial_poisson_mod2_kmeans49)
beta_hats2_kmeans100 <- calc_beta_hats(spatial_poisson_mod2_kmeans100)
```

Below is a function for computing the spatial random effect estimates.
```{r}
calc_w_hats <- function(spatial_poisson_mod, tail_n = 10000) {
    spatial_poisson_mod$p.w.samples %>%
        t() %>%
        tail(n = tail_n) %>%
        colMeans()
}
```

```{r}
w_hats1_grid49 <- calc_w_hats(spatial_poisson_mod1_grid49)
w_hats1_grid100 <- calc_w_hats(spatial_poisson_mod1_grid100)
w_hats1_kmeans49 <- calc_w_hats(spatial_poisson_mod1_kmeans49)
w_hats1_kmeans100 <- calc_w_hats(spatial_poisson_mod1_kmeans100)

w_hats2_grid49 <- calc_w_hats(spatial_poisson_mod2_grid49)
w_hats2_grid100 <- calc_w_hats(spatial_poisson_mod2_grid100)
w_hats2_kmeans49 <- calc_w_hats(spatial_poisson_mod2_kmeans49)
w_hats2_kmeans100 <- calc_w_hats(spatial_poisson_mod2_kmeans100)
```

## Fitted Values and Residuals

Below is a function for calculating fitted values and residuals.
```{r}
calc_fitted_vals_resids <- function(spatial_poisson_mod, beta_hats, w_hats) {
    fitted_vals <- spatial_poisson_mod %>%
        `$`(X) %>%
        `rownames<-`(NULL) %>%
        `%*%`(beta_hats[colnames(.)]) %>%
        drop() %>%
        `+`(w_hats) %>%
        exp() %>%
        `*`(model_df$num_nights)
    resids <- spatial_poisson_mod %>%
        `$`("Y") %>%
        drop() %>%
        unname() %>%
        `-`(fitted_vals)
    add_column(model_df, fitted_val = fitted_vals, resid = resids)
}
```

```{r}
fitted_vals_resids1_grid49 <- calc_fitted_vals_resids(
    spatial_poisson_mod1_grid49, beta_hats1_grid49, w_hats1_grid49
)
fitted_vals_resids1_grid100 <- calc_fitted_vals_resids(
    spatial_poisson_mod1_grid100, beta_hats1_grid100, w_hats1_grid100
)
fitted_vals_resids1_kmeans49 <- calc_fitted_vals_resids(
    spatial_poisson_mod1_kmeans49, beta_hats1_kmeans49, w_hats1_kmeans49
)
fitted_vals_resids1_kmeans100 <- calc_fitted_vals_resids(
    spatial_poisson_mod1_kmeans100, beta_hats1_kmeans100, w_hats1_kmeans100
)

fitted_vals_resids2_grid49 <- calc_fitted_vals_resids(
    spatial_poisson_mod2_grid49, beta_hats2_grid49, w_hats2_grid49
)
fitted_vals_resids2_grid100 <- calc_fitted_vals_resids(
    spatial_poisson_mod2_grid100, beta_hats2_grid100, w_hats2_grid100
)
fitted_vals_resids2_kmeans49 <- calc_fitted_vals_resids(
    spatial_poisson_mod2_kmeans49, beta_hats2_kmeans49, w_hats2_kmeans49
)
fitted_vals_resids2_kmeans100 <- calc_fitted_vals_resids(
    spatial_poisson_mod2_kmeans100, beta_hats2_kmeans100, w_hats2_kmeans100
)
```

## Empirical Semivariograms of Residuals

Below is a function for making empirical semivariograms of residuals.
```{r}
make_resid_variogram <- function(fitted_vals_resids, coord_cols) {
    resid_variogram <- fitted_vals_resids %>%
        select(all_of(c(coord_cols, "resid"))) %>%
        as.geodata(coords.col = 1:2) %>%
        jitterDupCoords(max = 1e-4) %>%
        variog(uvec = 10, messages = FALSE)
    resid_variogram %>%
        plot(
            type = "o",
            main = "Empirical Semivariogram of Residuals",
            xlab = "Distance", ylab = "Semivariance"
        )
}
```

```{r}
make_resid_variogram(
    fitted_vals_resids1_grid49, c("Lat_scaled", "Long_scaled")
)
```

```{r}
make_resid_variogram(
    fitted_vals_resids1_grid100, c("Lat_scaled", "Long_scaled")
)
```

```{r}
make_resid_variogram(
    fitted_vals_resids1_kmeans49, c("Lat_scaled", "Long_scaled")
)
```

```{r}
make_resid_variogram(
    fitted_vals_resids1_kmeans100, c("Lat_scaled", "Long_scaled")
)
```

```{r}
make_resid_variogram(
    fitted_vals_resids2_grid49, c("Lat_scaled", "dist_to_water_scaled")
)
```

```{r}
make_resid_variogram(
    fitted_vals_resids2_grid100, c("Lat_scaled", "dist_to_water_scaled")
)
```

```{r}
make_resid_variogram(
    fitted_vals_resids2_kmeans49, c("Lat_scaled", "dist_to_water_scaled")
)
```

```{r}
make_resid_variogram(
    fitted_vals_resids2_kmeans100, c("Lat_scaled", "dist_to_water_scaled")
)
```
In terms of residual distributions, there are no clear differences between models based on the boxplots below.
```{r}
tibble(
    resid1_grid49 = fitted_vals_resids1_grid49$resid,
    resid1_grid100 = fitted_vals_resids1_grid100$resid,
    resid1_kmeans49 = fitted_vals_resids1_kmeans49$resid,
    resid1_kmeans100 = fitted_vals_resids1_kmeans100$resid,
    resid2_grid49 = fitted_vals_resids2_grid49$resid,
    resid2_grid100 = fitted_vals_resids2_grid100$resid,
    resid2_kmeans49 = fitted_vals_resids2_kmeans49$resid,
    resid2_kmeans100 = fitted_vals_resids2_kmeans100$resid
) %>%
    pivot_longer(
        everything(),
        names_to = "mod", names_prefix = "resid",
        values_to = "resid"
    ) %>%
    ggplot(aes(mod, resid)) +
    geom_boxplot() +
    labs(x = "Model Variant", y = "Residual") +
    theme_bw() +
    theme(axis.text.x = element_text(angle = 20, vjust = 0.5))
```

In terms of residual distributions, there are no clear differences between models based on the histograms below.
```{r}
tibble(
    resid1_grid49 = fitted_vals_resids1_grid49$resid,
    resid1_grid100 = fitted_vals_resids1_grid100$resid,
    resid1_kmeans49 = fitted_vals_resids1_kmeans49$resid,
    resid1_kmeans100 = fitted_vals_resids1_kmeans100$resid,
    resid2_grid49 = fitted_vals_resids2_grid49$resid,
    resid2_grid100 = fitted_vals_resids2_grid100$resid,
    resid2_kmeans49 = fitted_vals_resids2_kmeans49$resid,
    resid2_kmeans100 = fitted_vals_resids2_kmeans100$resid
) %>%
    pivot_longer(
        everything(),
        names_to = "mod", names_prefix = "resid",
        values_to = "resid"
    ) %>%
    ggplot(aes(resid)) +
    facet_wrap(vars(mod), nrow = 2) +
    geom_histogram(bins = 20) +
    scale_x_continuous(n.breaks = 4) +
    labs(x = "Residual", y = "Number of Residuals") +
    theme_bw()
```

## Residual Maps

```{r}
make_resid_plot <- function(fitted_vals_resids, species) {
    ggplot() +
        geom_sf(data = great_lakes_states, color = "black", fill = "white") +
        geom_sf(data = ontario, color = "black", fill = "white") +
        geom_sf(data = great_lakes, color = "lightblue", fill = "lightblue") +
        geom_point(
            aes(Long, Lat, color = resid),
            filter(fitted_vals_resids, Species == species)
        ) +
        scale_color_gradient(low = "blue", high = "red") +
        coord_sf(xlim = c(-92, -76), ylim = c(41, 49)) +
        labs(
            x = "Longitude", y = "Latitude", color = "Residual", title = species
        ) +
        theme_minimal() +
        theme(plot.title = element_text(hjust = 0.5))
}

make_combined_resid_plot <- function(fitted_vals_resids) {
    ggplot(fitted_vals_resids) +
        facet_wrap(vars(Species)) +
        geom_sf(data = great_lakes_states, color = "black", fill = "white") +
        geom_sf(data = ontario, color = "black", fill = "white") +
        geom_sf(data = great_lakes, color = "lightblue", fill = "lightblue") +
        geom_point(aes(Long, Lat, color = resid)) +
        scale_color_gradient(low = "blue", high = "red") +
        coord_sf(xlim = c(-92, -76), ylim = c(41, 49)) +
        labs(x = "Longitude", y = "Latitude", color = "Residual") +
        theme_minimal() +
        theme(legend.position = "top", plot.title = element_text(hjust = 0.5))
}
```

```{r}
make_combined_resid_plot(fitted_vals_resids1_kmeans49)
```

```{r}
make_resid_plot(fitted_vals_resids1_kmeans49, "EPTFUS")
```

```{r}
make_resid_plot(fitted_vals_resids1_kmeans49, "LASNOC")
```

```{r}
make_resid_plot(fitted_vals_resids1_kmeans49, "PERSUB")
```
