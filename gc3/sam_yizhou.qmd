---
title: "matt_qc3"
format: html
---

# Sam and Yizhou's QC3 Model

```{r}
library(geoR)
library(dplyr)
library(conflicted)
library(here)
library(tidyverse)
library(scico)
library(sf)
library(rnaturalearth)
library(geoR)
library(spBayes)
library(coda)
library(ggspatial)
library(dplyr)

df <- read.csv("../data/model_data.csv")
df
```

```{r}
scaled_coords <- scale(df[, c("Lat", "Long", "dist_to_water")])
scaled_coord_df <- cbind.data.frame("AcousticSite" = df[, "AcousticSite"], scaled_coords)

```




```{r}

model_df <- df %>% dplyr::rename_with(~ gsub("_count", "", .x), ends_with("_count"))  %>% 
    reshape2::melt(
    id.vars = c("AcousticSite", "Year", "Lat", "Long", "dist_to_water", "water_size", "num_nights", "num_detectable_species"),
    variable.name="Species",
    value.name="count"
) %>% dplyr::filter(Species != "ALL" & count != 0) %>% 
    # Combine years together to remove temporal replicates
    dplyr::group_by(AcousticSite, Lat, Long, dist_to_water, water_size, Species, num_detectable_species) %>%
    dplyr::summarise(num_nights = sum(num_nights), count = sum(count)) %>%
    transform(avg_count = count / num_nights) 

```

```{r}
species <- unique(model_df$Species)

# Jitter the spatial variables in order to deal with we have replicates due to
# multiple species at the same site.
# Then apply z-score standardization to latitude and distance to water to ensure
# spatial coordinates are on similar scale.
model_df <- model_df |>
    dplyr::mutate(
        Lat_jit = jitter(Lat, 1e-6),
        Long_jit = jitter(Long, 1e-6),
        dist_to_water = jitter(dist_to_water, 1e-6)
    ) |>
    mutate(
        Lat_norm = scale(Lat_jit),
        Long_norm = scale(Long_jit),
        dist_to_water_norm = scale(dist_to_water)
    )

for (species_text in species) {
    plot_subset <- model_df[model_df$Species == species_text,]
    variogram <- variog(data=plot_subset$avg_count, coords = plot_subset[, c("Lat_norm", "dist_to_water_norm")])
    plot(variogram$u, variogram$v, type="l", main=species_text)
}

```

```{r, fig.height=7, fig.width=10}
model_df_sub <- model_df |> 
    dplyr::filter(Species %in% c("EPTFUS", "LASNOC", "PERSUB"))

mainmap <- ne_states(country = c("united states of america"), returnclass = "sf")
michiganplus <- mainmap %>% dplyr::filter(name %in% c("Illinois", "Michigan", "Wisconsin", "Ontario", "Ohio", "Indiana", "Pennsylvania", "New York", "West Virginia", "Minnesota", "Iowa", "Texas", "Kansas", "Oklahoma", "Nebraska", "Missouri"))

ggplot(data=model_df_sub) +
    geom_sf(data = michiganplus) + 
    facet_wrap(~ Species, ncol=2) + 
    geom_point(aes(x=Long, y=Lat, color=log1p(avg_count)), size=0.75) +
    theme_minimal() +
    theme(legend.position = "right", axis.text.x=element_text(angle=45)) +
    guides(color = guide_colorbar(title="Sightings/Night\n(Log1p)")) +
    ggtitle("Log1p Sightings per Night by Species")
```

```{r}
lin_model <- lm(avg_count ~ Lat_norm + Long_norm + dist_to_water_norm + Species, model_df_sub)
summary(lin_model)
model_df_sub |> 
    mutate(lin_model_resid = lin_model$residuals) |>
    dplyr::filter(Species %in% c("EPTFUS", "LASNOC", "PERSUB")) |>
    ggplot() +
        geom_sf(data = michiganplus) + 
        facet_wrap(~ Species, ncol=2) + 
        geom_point(aes(x=Long, y=Lat, color=sign(lin_model_resid) * abs(lin_model_resid)^(1/3)), size=0.75) +
        theme_minimal() +
        theme(legend.position = "right", axis.text.x=element_text(angle=45)) +
        guides(color = guide_colorbar(title="Residual^(1/3)")) +
        ggtitle("Linear Model Residuals by Species")
```

```{r}
n.samples <- 5000
starting <- list("phi"=20, "sigma.sq"=10, "tau.sq"=5)
tuning <- list("phi"=0.1, "sigma.sq"=0.05, "tau.sq"=0.05)
priors <- list(
    "beta.Norm"=list(rep(0, 4), diag(1, 4)),
    "phi.Unif"=c(.00005, 40), 
    "sigma.sq.IG"=c(2, 10.20467^2), # Center around residual variance
    "tau.sq.IG"=c(2, 0.1 * 10.20467^2) # Assume 10% of variance is due to noise
)
cov.model <- "exponential"
amcmc = list(n.batch = 500, batch.length = 50, accept.rate = 0.25)

spatial_lm <- spBayes::spLM(
    formula=log1p(avg_count) ~ Long_norm + Species,
    data=model_df_sub,
    coords=as.matrix(model_df_sub[, c("Lat_norm", "dist_to_water_norm")]),
    starting=starting,
    cov.model=cov.model,
    amcmc=amcmc,
    n.samples=n.samples,
    tuning=tuning,
    priors=priors,
    verbose=TRUE
)

spatial_lm_fit <- spatial_lm %>% spRecover(start=round(n.samples/3), verbose=TRUE)
```

```{r}
## Check for MCMC convergence
# Check trace plots
par(mfrow=c(2,2))
#par(mfrow=c(3,2))
ts.plot(spatial_lm_fit$p.beta.recover.samples[,1], main = "beta", ylab = "")
ts.plot(spatial_lm_fit$p.theta.recover.samples[,1], main = "sigma^2", ylab = "")
ts.plot(spatial_lm_fit$p.theta.recover.samples[,2], main = "tau^2", ylab = "")
ts.plot(spatial_lm_fit$p.theta.recover.samples[,3], main = "phi", ylab = "")
#ts.plot(spatial_lm_fit$p.w.recover.samples[,4], main = "beta[1]", ylab = "")

# Check ACF plots 
autocorr.plot(as.mcmc(spatial_lm_fit$p.theta.recover.samples))

# Check acceptance rates and effective sample size
spatial_lm_fit$acceptance
effectiveSize(as.mcmc(spatial_lm_fit$p.theta.recover.samples))

# Check model diagnostics
spDiag(spatial_lm_fit, start=round(n.samples/3), verbose=TRUE)
```

```{r}
plot(spatial_lm_fit$p.beta.recover.samples[, "Long_norm"])

plot(spatial_lm_fit$p.beta.recover.samples[, "SpeciesPERSUB"])

plot(spatial_lm_fit$p.w.recover.samples[100, ], type="l", main="Spatial Effect Sample Path") # Plot the spatial effect for the first site

spatial_lm_fit$p.theta.recover.samples
```

```{r}
posterior_preds <- spatial_lm_fit$p.beta.recover.samples %*% t(spatial_lm_fit$X)  # All posterior predictions
posterior_var <- apply(posterior_preds, 2, var)  # Variance of residuals
posterior_mean <- apply(posterior_preds, 2, mean)  # Variance of residuals


residual_plot_data <- cbind.data.frame(
    'var'=posterior_var,
    'mean'=posterior_mean,
    'true'=spatial_lm_fit$Y,
    'lat'=model_df_sub$Lat,
    'long'=model_df_sub$Long,
    'lat_norm'=model_df_sub$Lat_norm,
    'long_norm'=model_df_sub$Long_norm,
    'dist_to_water_norm'=model_df_sub$dist_to_water_norm,
    'species'=model_df_sub$Species,
    'resid'=spatial_lm_fit$Y - posterior_mean,
    'spatial_effect'=apply(spatial_lm_fit$p.w.recover.samples, 1, mean)
)
residual_plot_data <- residual_plot_data[order(residual_plot_data$mean),]
residual_plot_data$idx <- seq(1, nrow(residual_plot_data))


plot(
    variog(data=residual_plot_data$resid, coords = cbind(residual_plot_data$lat_norm, residual_plot_data$dist_to_water_norm), uvec=10),
    main="Residual Variogram"
)
```

```{r}
library(spdep)
nb <- knn2nb(knearneigh(model_df_sub[, c("Lat_norm", "dist_to_water_norm")], k = 4))  # Define neighbors
listw <- nb2listw(nb, style = "W")  # Create spatial weights
moran.test(residual_plot_data$resid, listw)  # Run Moran's I test
```

```{r}
residual_plot_data |> 
    ggplot(aes(x=resid, fill=species)) + 
        geom_density(alpha=0.5) + 
        scale_fill_viridis_d() +
        labs(
            title="Residual Density by Species",
            x="Residuals",
            y="Density"
        ) 
```


```{r}
residual_plot_data |>
    ggplot(aes(x=mean, y=resid)) + 
        geom_point(size=2.0) +
        theme_minimal() +
        theme(legend.position = "right", axis.text.x=element_text(angle=45)) +
        geom_hline(yintercept=0, linetype="dashed") +
        facet_wrap(.~species, ncol=1)
        # guides(color = guide_colorbar(title="Residuals")) +
        # geom_jitter(data=sightings_df, size = 1.5, aes(x = Long, y = Lat, color = log1p(count))) +
        # coord_sf(ylim = c(25, 49), xlim = c(-75, -107)) +
        # scale_color_viridis_c(name = "Log Counts", option = "B") +
        # ggtitle("Residuals by Species")
```

```{r}
residual_plot_data |>
    ggplot() +
        geom_sf(data = michiganplus) + 
        # facet_wrap(~ Species, ncol=3) + 
        geom_tile(aes(x=long, y=lat, fill=spatial_effect), width=0.25, height=0.25) +
        theme_minimal() +
        theme(legend.position = "right", axis.text.x=element_text(angle=45)) +
        coord_sf(ylim = c(40, 49), xlim = c(-75, -100)) +
        # scale_color_viridis_c(name = "Log Counts", option = "B") +
        ggtitle("Estimated Spatial Effects")
```
