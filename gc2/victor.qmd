---
title: "Victor's Analysis"
format:
    html:
        embed-resources: true
        toc: true
        number-sections: true
---

```{r}
#| label: "setup"
#| message: FALSE

here::i_am("gc2/victor.qmd")

library(conflicted)
library(geoR)
library(here)
library(spBayes)
library(tidyverse)
conflicts_prefer(dplyr::filter, dplyr::lag)

data <- read_csv(here("data/processed/annual_bat_counts.csv"))

theme_set(theme_bw())

set.seed(1)
```

# Preparation of the Data for Model-Building

There's one record for each pair of `AcousticSite` and `Year`.
```{r}
data %>% count(AcousticSite, Year) %>% filter(n > 1)
```

Most sites only have data for a single year.
```{r}
data %>%
    count(AcousticSite, name = "num_years") %>%
    count(num_years, name = "num_sites")
```

Below is another summary that shows that most sites only have data for one year.
```{r}
data %>%
    group_by(AcousticSite) %>%
    summarize(years = str_c(Year, collapse = ",")) %>%
    count(years, sort = TRUE, name = "num_sites")
```

More sites have data for `r count(data, Year, sort = TRUE)$Year[1]` than for any other year.
```{r}
count(data, Year, sort = TRUE, name = "num_sites")
```

For each site-year pair, we count the number of species that could be detected at the site in the year.
```{r}
num_detectable_species <- data %>%
    select(ends_with("_meta")) %>%
    apply(1, function(r) sum(r == "yes"))
```

We create a dataset that we can fit models to. There is one record for each site-year pair. The response is `ALL`, the number of detections across all species. `Lat` and `Long` will be used as spatial covariates. We will use `dist_to_water`, the number of nights on which the detectors were operational, and the number of detectable species as non-spatial covariates.
```{r}
data_for_mods <- data %>%
    select(
        AcousticSite, Year,
        ALL,
        Lat, Long,
        dist_to_water, starts_with("nights_")
    ) %>%
    pivot_longer(
        starts_with("nights_"),
        names_to = "num_nights_year", names_prefix = "nights_",
        values_to = "num_nights"
    ) %>%
    filter(Year == num_nights_year) %>%
    select(!num_nights_year) %>%
    add_column(num_detectable_species)
```

# Models without Spatial Random Effects

## A Poisson Regression Model

We first fit a Poisson regression model without overdispersion or underdispersion. Under the model, at any location $s$,
$$
Y(s) \sim \text{Poisson}(\exp\{\beta_0 + X(s)^{\top}\beta\}),
$$ {#eq-nonspatial-poisson}
where $X(s)$ is the vector whose components are the distance from $s$ to the shore, the number of operational nights, and the number of detectable species.
```{r}
mod1 <- glm(
    ALL ~ dist_to_water + num_nights + num_detectable_species,
    poisson,
    data_for_mods
)
mod1_fitted_vals_resids <- tibble(
    fitted_val = fitted(mod1), resid = resid(mod1)
)
```

Below is a summary of the fitted model.
```{r}
summary(mod1)
```

Under the model in @eq-nonspatial-poisson, $\mathbb{E}(Y(s)) = \text{Var}(Y(s))$, or $\sqrt{\mathbb{E}(Y(s))} = \text{SD}(Y(s))$. We use the residuals to check whether this property of the model is reasonable. For the $i$th observation, which was recorded at location $s_i$, we compare $\sqrt{\widehat{\mathbb{E}}(Y(s_i))}$ to the absolute residual $|Y(s_i) - \widehat{Y}(s_i)|$; if the property is reasonable, then these two quantities should be similar. Below, we plot the absolute residual versus the square root of the fitted value. The two are equal along the dashed line. For some observations, the absolute residual is much larger than expected. However, this isn't true systematically, so those observations may just be outliers. The absolute residuals that aren't close to the line seem to be below it more often than above it, which suggests underdispersion.
```{r}
mod1_fitted_vals_resids %>%
    ggplot(aes(sqrt(fitted_val), abs(resid))) +
    geom_point(alpha = 0.3) +
    geom_abline(linetype = "dashed", slope = 1, intercept = 0) +
    labs(x = expression(sqrt("Fitted Value")), y = "Absolute Residual") +
    theme_bw()
```

Below is a histogram of the ratios of the absolute residual to the square root of the fitted value; the dashed line is at one. The histogram reiterates the messages of the scatterplot above.
```{r}
mod1_fitted_vals_resids %>%
    mutate(ratio = abs(resid) / sqrt(fitted_val)) %>%
    ggplot(aes(ratio)) +
    geom_histogram(bins = 100, color = "black", fill = "white") +
    geom_vline(linetype = "dashed", xintercept = 1) +
    labs(
        x = expression("Absolute Residual" / sqrt("Fitted Value")),
        y = "Number of Observations"
    )
```

Below is a function for computing the Pearson dispersion statistic.
```{r}
calc_pearson_disperse_stat <- function(mod) {
    sum(resid(mod)^2 / fitted(mod)) / df.residual(mod)
}
```

The Pearson dispersion statistic for the model in @eq-nonspatial-poisson is below.
```{r}
calc_pearson_disperse_stat(mod1)
```

To continue assessing the fit of the model, we generate 100 samples of counts under the model. We will compare how the counts in these samples are distributed to how the real counts are distributed.
```{r}
samples <- replicate(
    100,
    rpois(nrow(data_for_mods), mod1_fitted_vals_resids$fitted_val)
) %>%
    `colnames<-`(str_c("sample", 1:100)) %>%
    as_tibble() %>%
    pivot_longer(
        everything(),
        names_to = "sample", names_prefix = "sample",
        values_to = "ALL"
    ) %>%
    bind_rows(tibble(sample = "0", ALL = data_for_mods$ALL), .)
```

In the plot below, there is one density estimate for each sample (the gray curves) as well as a density estimate for the real data (the blue curve). The tails look fairly similar, but the blue curve's peak is to the left of the gray curves' peaks. This suggests that the count under the model in @eq-nonspatial-poisson tends to be somewhat larger than it should be.
```{r}
samples %>%
    mutate(is_real_data = sample == "0") %>%
    ggplot(aes(ALL, group = sample, color = is_real_data)) +
    scale_color_manual(
        labels = c(`TRUE` = "Real", `FALSE` = "Simulated"),
        values = c(`TRUE` = "blue", `FALSE` = "gray")
    ) +
    geom_density() +
    labs(x = "Response", y = "Density", color = "Data Type")
```

We next compute the empirical semivariogram of the residuals from the model in @eq-nonspatial-poisson. Since there are replicates for some sites, we need to jitter the coordinates to make things work. We use 100 bins to compute the empirical semivariogram.
```{r}
#| message: FALSE
#| warning: FALSE

mod1_variogram <- bind_cols(data_for_mods, mod1_fitted_vals_resids) %>%
    select("Long", "Lat", "resid") %>%
    as.geodata() %>%
    jitterDupCoords(max = 1e-4) %>%
    variog(uvec = 100, messages = FALSE)
```
The empirical semivariogram suggests spatial dependence only over small distances. We can try fitting a Poisson regression model with spatial random effects.
```{r}
mod1_variogram %>%
    plot(
        type = "o",
        main = "Empirical Semivariogram of Residuals",
        xlab = "Distance", ylab = "Semivariance"
    )
```


## A Quasi-Poisson Regression Model

We next try a Quasi-Poisson regression model, i.e., one for which the dispersion parameter is estimated instead of being fixed at one.
```{r}
mod2 <- glm(
    ALL ~ dist_to_water + num_nights + num_detectable_species,
    quasipoisson,
    data_for_mods
)
mod2_fitted_vals_resids <- tibble(
    fitted_val = fitted(mod2), resid = resid(mod2)
)
```

Below is a summary of the fitted model. Note that the estimated dispersion parameter is large, so the fitted model is similar to the first fitted model.
```{r}
summary(mod2)
```

Since the dispersion parameter estimate is large, the scatterplot of the absolute residual versus the square root of the fitted value looks almost exactly like the first scatterplot.
```{r}
mod2_fitted_vals_resids %>%
    ggplot(aes(sqrt(fitted_val), abs(resid))) +
    geom_point(alpha = 0.3) +
    geom_abline(linetype = "dashed", slope = 1, intercept = 0) +
    labs(x = expression(sqrt("Fitted Value")), y = "Absolute Residual") +
    theme_bw()
```

The Pearson dispersion statistic didn't change.
```{r}
calc_pearson_disperse_stat(mod2)
```

